package ai.shelter.shelterbackend.controller

import ai.shelter.shelterbackend.entity.Cat
import ai.shelter.shelterbackend.entity.Location
import org.junit.jupiter.api.Assertions.*

import com.fasterxml.jackson.databind.ObjectMapper
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Test
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.http.MediaType
import org.springframework.test.web.servlet.MockMvc
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.status

/* generated by ChatGPT */
@SpringBootTest
@AutoConfigureMockMvc
class CatControllerTest {
    @Autowired
    lateinit var mockMvc: MockMvc

    @Autowired
    lateinit var objectMapper: ObjectMapper

    // started by ChatGPT, continued with copilot
    @Test
    fun testCreateAndFind() {
        val location = Location(name = "Test location", address = "123 Main St", phone = "123-456-7890")
        val cat = Cat(name = "Fluffy", location = location)
        val catJson = objectMapper.writeValueAsString(cat)
        val result = mockMvc.perform(post("/cats")
            .contentType(MediaType.APPLICATION_JSON)
            .content(catJson))
            .andExpect(status().isOk)
            .andReturn()
        val resultCat = objectMapper.readValue(result.response.contentAsString, Cat::class.java)
        assertThat(resultCat.id).isNotNull
        assertThat(resultCat.name).isEqualTo(cat.name)
        assertThat(resultCat.location.id).isNotNull
        assertThat(resultCat.location.name).isEqualTo(cat.location.name)
        assertThat(resultCat.location.address).isEqualTo(cat.location.address)
        assertThat(resultCat.location.phone).isEqualTo(cat.location.phone)

        val foundCat = mockMvc.perform(get("/cats/${resultCat.id}"))
            .andExpect(status().isOk)
            .andReturn()
        val foundCatJson = objectMapper.readValue(foundCat.response.contentAsString, Cat::class.java)
        assertThat(foundCatJson.id).isEqualTo(resultCat.id)
        assertThat(foundCatJson.name).isEqualTo(resultCat.name)
        assertThat(foundCatJson.location.id).isEqualTo(resultCat.location.id)
        assertThat(foundCatJson.location.name).isEqualTo(resultCat.location.name)
        assertThat(foundCatJson.location.address).isEqualTo(resultCat.location.address)
        assertThat(foundCatJson.location.phone).isEqualTo(resultCat.location.phone)
    }
}